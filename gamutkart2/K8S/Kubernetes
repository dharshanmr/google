Installing Kubernetes
===========================
1)
# Install container runtime - Docker
https://docs.docker.com/install/linux/docker-ce/ubuntu/


2)
# Installed Kubeadm
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

- sudo apt-get update

- sudo apt-get install -y apt-transport-https curl

- Add repository keys to download tools:
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

- Add repository:
Open this file "/etc/apt/sources.list.d/kubernetes.list" then add below line
        deb https://apt.kubernetes.io/ kubernetes-xenial main
        
- sudo apt-get update

- sudo apt-get install -y kubelet kubeadm kubectl

- sudo apt-mark hold kubelet kubeadm kubectl


#3) Initialize a new Kubernetes cluster
sudo kubeadm init
NOTE: Save this output as it's required to add worker nodes.

NOTE:
If you get error saying Processor core should be more than 1, increase no. cores more that 1 based on your computing power.

If you get 'swap on' error do below:
$ sudo swapoff -a
$ sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
        
6)
# As per the instruction from 'kubeadm init' command, To make kubectl work for your non-root user, run these commands.
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

#8) Verify if cluster is initialized succussfuly
$ kubectl get nodes
O/P:
$ kubectl get nodes
NAME     STATUS     ROLES    AGE   VERSION
ubuntu   NotReady   master   11m   v1.16.2


#9) Run the following kubectl command to find the reason why the cluster STATUS is showing as NotReady.
	- This command shows all Pods in all namespaces - this includes system Pods in the system (kube-system) namespace.
	- As we can see, none of the coredns Pods are running
	- This is preventing the cluster from entering the Ready state, and is happening because we haven’t created the Pod network yet.
O/P:
$ kubectl get pods --all-namespaces
NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE
kube-system   coredns-5644d7b6d9-5nsks         0/1     Pending   0          17m
kube-system   coredns-5644d7b6d9-bj5q6         0/1     Pending   0          17m
kube-system   etcd-ubuntu                      1/1     Running   0          16m
kube-system   kube-apiserver-ubuntu            1/1     Running   0          16m
kube-system   kube-controller-manager-ubuntu   1/1     Running   0          16m
kube-system   kube-proxy-mg4dq                 1/1     Running   0          17m
kube-system   kube-scheduler-ubuntu

#7) Create Pod Network. You must install a pod network add-on so that your pods can communicate with each other. (As per kubeadm init output)
$ sudo sysctl net.bridge.bridge-nf-call-iptables=1
$ kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

#8) Check if the status of Master is changed from 'NotReady' to 'Ready'
$ kubectl get nodes
NAME STATUS ROLES AGE VERSION
node1 Ready master 3m51s v1.12.1

GREAT - the cluster is ready and all dns system pods are now working. Cluster is ready now.
		Now that the cluster is up and running, it’s time to add some nodes.


						Ceating Worker Nodes
						==========================
# Install Virtual box in your Linux VM running on your windows(This should be created with VMWare Player)
Note: you can't create VMs inside another VMs using Virtualbox. So Install VMWare Player in your windows and Install Virtualbox to create worker nodes.

https://computingforgeeks.com/install-virtualbox-6-0-on-ubuntu-18-04-debian-9-ubuntu-16-04/

# Install Vagrant
$ vagrant_2.2.5_x86_64.deb

# Set up Vagrant Workspace
$ mkdir vagrant_kubernetes
$ cd vagrant_kubernetes
$ vagrant init ubuntu/xenial64
$ vagrant up

# Login to the Worker node to join it to the cluster
kubeadm join 192.168.254.129:6443 --token lc1x37.v1dt857dfny4pszd \
    --discovery-token-ca-cert-hash sha256:c4b751ebfefc8ea842f654daab07504ad033873eee87d137c1eb95720c2db8de
    
Note: It will throw the error as kubeadm is not install in this Node.


Worker Node Setup & Joining to the cluster:
==============================================
# Install kubeadm
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

# Install container runtime
    https://docs.docker.com/install/linux/docker-ce/ubuntu/

# To bootstrap a Kubernetes worker node and join it to the cluster run below command.
Note: bootstrap: It automatically installs kubectl and kubelet.

kubeadm join 192.168.254.129:6443 --token lc1x37.v1dt857dfny4pszd \
    --discovery-token-ca-cert-hash sha256:c4b751ebfefc8ea842f654daab07504ad033873eee87d137c1eb95720c2db8de

# Verify node Join (Run below in Control-plane node)
kubectl get nodes

					Creating PODs
			       =================
- Use the following kubectl command to POST the manifest to the API server and deploy a Pod from 
  it.
$ kubectl apply -f pod.yml

- Check if pod is created
$ kubectl get pods
$ kubectl get pods --watch

- Inspecting running Pods
$ kubectl describe pods hello-pod

- Deleting a pod
kubectl delete pods <pod>

- Deleting a pod forcibly
kubectl delete pods <pod> --grace-period=0 --force


Misc topic:
				Removing the node from the cluster:
			=========================================
kubectl drain <node name> --delete-local-data --force --ignore-daemonsets
kubectl delete node <node name>

#
Then, on the node being removed, reset all kubeadm installed state:
kubeadm reset

- Verify:
kubectl get nodes

TODO:
https://kubernetdes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/


Vagrant Useful Commands:
================================
# Initiating Vagrantfile
$ vagrant init ubuntu/xenial64

list:
$ vagrant box list
$ vagrant box remove bento/ubuntu-16.04

check status: running or not
$ vagrant status

shutdown:
$ vagrant halt

suspend:
$ vagrant suspend

restart:
vagrant up

Reading - Additional Official Meterial
=============================
https://kubernetes.io/docs/concepts/


